// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
    previewFeatures = ["filteredRelationCount"]
}

datasource db {
    provider = "mysql"
    url      = env("DATABASE_URL")
    relationMode = "prisma"
}

model Company {
  id        String   @id @default(cuid())
  name      String
  slug      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  events    Event[]
  employees Employee[]
  players   Player[]
}

model Employee {
  id       String   @id @default(cuid())
  email String
  companyId String
  roleId    String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  company Company @relation(fields: [companyId], references: [id])
  role    Role    @relation(fields: [roleId], references: [id])

  @@index([companyId])
  @@index([roleId])
}

model Role {
  id       String   @id @default(cuid())
  name     String
  slug     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  employees Employee[]
}

model Player {
  id             String           @id
  name           String
  slug           String
  companyId      String
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  PlayerHasEvent PlayerHasEvent[]
  company        Company          @relation(fields: [companyId], references: [id])


  @@index([companyId])
}

model Event {
  id          String   @id @default(cuid())
  name        String
  description String
  score       Int
  initialDate DateTime?
  finalDate   DateTime?
  limit       Int?
  slug        String
  companyId   String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  company        Company          @relation(fields: [companyId], references: [id])
  PlayerHasEvent PlayerHasEvent[]
  Achievement    Achievement[]

  @@index([companyId])
}

model Achievement {
  id        String @id @default(cuid())
  name      String
  slug      String
  eventId   String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  event Event @relation(fields: [eventId], references: [id])

  @@index([eventId])
}

model PlayerHasEvent {
  playerId String
  eventId  String
  score Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  event  Event   @relation(fields: [eventId], references: [id])
  player Player  @relation(fields: [playerId], references: [id])

  @@id([playerId, eventId])
  @@index([eventId])
  @@index([playerId])
}
